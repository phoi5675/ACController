#include <IRremote.h>

// ir pin setup
IRsend irsend;
// ir vars
unsigned int turnOn[] = { 2996, 9012, 512, 1544, 512, 556, 520, 548, 516, 532, 488, 552, 484, 584, 508, 536, 492, 556, 488, 556, 504, 1532, 536, 532, 488, 576, 460, 584, 528, 516, 492, 1544, 528, 1508, 540, 532, 508, 1524, 516, 1544, 532, 1508, 528, 1524, 520, 1544, 528, 1508, 512, 1548, 516, 1544, 516, 552, 500, 548, 488, 552, 548, 548, 528, 1484, 540, 552, 548, 496, 544, 1472, 508, 1548, 512, 556, 468, 576, 512, 1524, 540, 528, 488, 580, 492, 1520, 512, 1548, 532, 536, 488, 1548, 516, 552, 488, 1548, 488, 604, 492, 552, 544, 552, 524, 520, 508, 536, 516, 532, 484, 580, 488, 1524, 512, 1548, 544, 1516, 484, 1552, 404}; //AnalysIR Batch Export (IRremote) - RAW
unsigned int turnOff[] = {2956, 9064, 520, 1544, 520, 520, 556, 488, 516, 584, 576, 516, 516, 528, 512, 532, 512, 532, 512, 536, 540, 1516, 512, 536, 508, 556, 524, 1512, 488, 1572, 544, 528, 512, 1576, 608, 1476, 512, 1548, 524, 1512, 516, 1572, 540, 536, 500, 560, 548, 496, 520, 524, 512, 536, 508, 556, 516, 580, 540, 536, 508, 536, 508, 556, 512, 532, 560, 484, 516, 532, 512, 604, 540, 528, 560, 484, 516, 1548, 540, 528, 520, 528, 508, 556, 456, 588, 556, 488, 516, 528, 512, 588, 604, 488, 556, 484, 488, 560, 512, 1548, 556, 488, 512, 532, 512, 556, 488, 556, 552, 492, 508, 536, 512, 580, 544, 528, 484, 1536, 2968, 9032, 556, 1480, 516, 552, 452, 592, 552, 540, 544, 536, 504, 556, 520, 524, 552, 492, 520, 524, 512, 1552, 556, 484, 516, 528, 516, 552, 520, 1516, 516, 1544, 516, 1524, 472, 600, 560, 1520, 512, 1548, 560, 1480, 508, 1576, 504, 1584, 516, 1540, 552, 1488, 512, 1572, 540, 528, 516, 532, 516, 532, 508, 556, 556, 1480, 512, 556, 452, 588, 516, 1528, 528, 1576, 544, 532, 512, 552, 520, 1516, 540, 528, 516, 528, 520, 1540, 548, 1540, 552, 520, 540, 1544, 516, 560, 564, 1520, 512, 580, 544, 528, 516, 532, 508, 556, 516, 528, 560, 484, 512, 532, 516, 604, 544, 524, 516, 1572, 568, 1520, 492};
unsigned int turnHigh[] = {2964, 9036, 548, 1512, 564, 484, 548, 520, 528, 540, 564, 504, 528, 496, 548, 544, 544, 524, 532, 516, 520, 1508, 556, 516, 528, 520, 560, 484, 548, 496, 544, 1508, 548, 1496, 548, 568, 560, 1524, 552, 1564, 524, 1564, 552, 1560, 524, 1564, 556, 1480, 548, 1508, 556, 1508, 560, 484, 552, 492, 616, 504, 432, 588, 560, 1504, 580, 488, 548, 516, 528, 1508, 556, 1480, 516, 548, 520, 528, 564, 484, 576, 516, 556, 1476, 556, 516, 552, 1536, 544, 1568, 552, 492, 548, 1512, 564, 1476, 552, 516, 544, 496, 564, 480, 552, 496, 504, 588, 560, 484, 556, 484, 604, 1508, 572, 1516, 604, 1508, 604, 1484, 552};

// selection var
char sel = 'a'; // select AC mode

void setup(){
  Serial.begin(9600);
}

void send_ir(char sel){
  Serial.println("sendir");
  int khz = 38; // 38kHz carrier frequency for the NEC protocol
  if(sel == '0'){ // turn off
    irsend.sendRaw(turnOff, sizeof(turnOff) / sizeof(turnOff[0]), khz);
  }
  else if(sel == '1') {// turn on
      Serial.println("1");
    irsend.sendRaw(turnOn, sizeof(turnOn) / sizeof(turnOn[0]), khz);
  }
  else if(sel == '2'){ // turn high
    irsend.sendRaw(turnHigh, sizeof(turnHigh) / sizeof(turnHigh[0]), khz);
  }
}
void loop() {

  // load val w/ uart
  if (Serial.available()){
    sel = (int)Serial.read();
    for(int i = 0; i < 3; i++){
      send_ir(sel);
      delay(500);
    }
    sel = 'a';
  }
  
  delay(1000);
}
